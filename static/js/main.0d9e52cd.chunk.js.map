{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","actions/types.js","containers/App.js","actions/actions.js","serviceWorkerRegistration.js","reducers/searchRobots.js","reducers/requestRobots.js","reducers/index.js","store.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","robot","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","console","log","color","onClick","Header","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","reqRobots","dispatch","event","text","target","value","payload","a","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialState","requestRobots","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0d9e52cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5 w5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  // alternate approach is to map through in separate function\r\n  // const cardArray = robots.map((use, i) => {\r\n  //   return (\r\n  //     <Card id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n  //   );\r\n  // });\r\n\r\n  return (\r\n    <div>\r\n      {/* {cardArray} */}\r\n      {robots.map(robot => (\r\n        <Card\r\n          key={robot.id}\r\n          id={robot.id}\r\n          name={robot.name}\r\n          email={robot.email}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label='Search Robots'\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflow: 'scroll',\r\n        border: '5px solid black',\r\n        height: '800px'\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooops.That is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0\r\n    };\r\n  }\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState(state => {\r\n      return { count: this.state.count + 1 };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log('CounterButton');\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <CounterButton color={'red'} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions/actions';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    if (isPending) {\n      return <h1>Loading ...</h1>;\n    } else {\n      return (\n        <div className='tc'>\n          <Header />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.reqRobots.robots,\n  isPending: state.reqRobots.isPending,\n  error: state.reqRobots.error\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './types';\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCHFIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => async dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCHFIELD } from '../actions/types';\r\n\r\nconst initialState = {\r\n  searchField: ''\r\n};\r\n\r\nconst searchRobots = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return {\r\n        ...state,\r\n        searchField: payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default searchRobots;\r\n","import {\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n};\r\n\r\nconst requestRobots = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return {\r\n        ...state,\r\n        isPending: true\r\n      };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        robots: payload,\r\n        isPending: false\r\n      };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return {\r\n        ...state,\r\n        error: payload,\r\n        isPending: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default requestRobots;\r\n","import { combineReducers } from 'redux';\r\nimport searchRobots from './searchRobots';\r\nimport reqRobots from './requestRobots';\r\n\r\n// name below define what your state buckets are called\r\nexport default combineReducers({\r\n  searchRobots,\r\n  reqRobots\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n// import { createLogger } from 'redux-logger';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n// const logger = createLogger();\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n\r\n// const initialState = {};\r\n// const logger = createLogger;\r\n\r\n// const middleware = [thunk, logger];\r\n\r\n// const store = createStore(\r\n//   rootReducer,\r\n//   initialState,\r\n//   composeWithDevTools(applyMiddleware(...middleware))\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n// Redux\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}